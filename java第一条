
package 水仙花;

public class 欧阳文帅 {

	public static void main(String[] args) {
		System.out.println("算机2103欧阳文帅");
		int d=1;
		for(int i=100;i<1000;i++) {
        int a=i%10;
        int b=i/10%10;
        int c=i/10/10%10;
        if(i==a*a*a+b*b*b+c*c*c) {
        	System.out.print(i+" ");
        	d++;
        }
        if(d%10==0) System.out.println();
	}
  }
}
//猴子问题
package 水仙花;

public class 欧阳文帅 {

	public static void main(String[] args) {
		System.out.println("算机2103欧阳文帅");
		int a=1;
		for(int x=1;x<10;x++) {
			a=(a+1)*2;
		}
		System.out.println("猴子可以摘取桃子的总数："+a);
	}
}
//大马小马问题
package 水仙花;

public class 欧阳文帅 {

	public static void main(String[] args) {
		System.out.println("算机2103欧阳文帅");
		int ls=100;
		  for(int a=0;a<=100;a++){
		   for(int b=0;b<=100;b++){
		    for(int c=0;c<=100;c++){
		     if(a*3+b*2+c/2==ls&a+b+c==ls){
		      if(c%2==0){
		       System.out.println("大马："+a+"，小马："+b+"，马崽："+c);
		      } 
		     }
		    }
		   }
		  }
		 }
	}
//九九乘法表
package 水仙花;

public class 欧阳文帅 {

	public static void main(String[] args) {
		System.out.println("算机2103欧阳文帅");
		for (int i=1;i<=9;i++) {
			for(int j=1;j<=9;j++) {
				System.out.print(j+"*"+i+"="+j*i+"\t");
			}
			System.out.println();
		}
 }
}
//拔高题
package 水仙花;

public class 欧阳文帅 {
	public static void main(String[] args) {
		System.out.println("算机2103欧阳文帅");
		    boolean[] array=new boolean[500];
		    for(int i=0;i<array.length;i++) {
		        array[i]=true;
		    }
		    int s = 500;
		    int c = 0;
		    int e = 0;
		    
		    while(s > 1) {
		        if(array[e]) {
		         c ++;
		            if(c == 3) {
		            c = 0;
		            array[e] = false;
		            s--;
		            }
		        }
		        e ++;
		        if(e == 500) {
		            e = 0;
		        }    
		    }
		     for(int i=0;i<array.length;i++) {
		        if(array[i]) {
		        System.out.println(i);
		        }
		     }
		     }
		    
		    
//赋值运算府的应用例子
public class fsdf {

	public static void main(String[] args) {
    int i=10;
    System.out.println("i:"+i);
	i=i+20;
	System.out.println("i:"+i);
	short a=10;
	a=(short)(a+10);
	System.out.println("a:"+a);
	short q=10;
	q=(short)(q+20);
	System.out.println("q:"+q);
	} 
	
}

package wc1;

public class wc1 {
	 private  int[] queue = null;
	    private int front = 0;
	    private int rear = 0;
	    private boolean empty = true;
	    //设置循环队列长度
	    public wc1(int max) {
	        this.queue = new int[max];
	    }
	    //清空循环队列
	    public void clearQueue() {
	        this.front = 0;
	        this.rear = 0;
	        this.empty = true;
	        for(int i:this.queue) {
	            i = 0;
	        }


	    }
	    //返回循环队列的元素个数
	    public int queueLength() {
	        if(this.front==this.rear && this.empty==false) {//如果循环队列已满，则返回数组长度即元素个数
	            return this.queue.length;
	        }
	        else {//否则，取模运算得到长度
	            return (this.rear-this.front+this.queue.length)%this.queue.length;
	        }
	    }
	    //向队尾插入元素
	    public void enQueue(int value) {
	        if(this.front==this.rear && this.empty==false) {
	            System.out.println("队列已满");
	        }
	        else {
	            this.queue[this.rear] = value;
	            this.rear=(++this.rear)%this.queue.length;
	            this.empty = false;
	        }
	    }
	    //删除并返回对头元素
	    public void deQueue() {
	        if(this.front==this.rear && this.empty==true) {
	            System.out.println("队列为空");
	        }
	        else {
	            this.queue[this.front] = 0;
	            this.front = (++this.front)%this.queue.length;
	            if(this.queue[this.front]==0){
	                System.out.println("队首元素已删除");
	            }
	        }
	    }
	    //遍历循环队列
	    public void queueTraverse() {
	        for(int i:this.queue){
	            System.out.print(i+" ");
	        }
	    }
	    public static void main(String[] args) {
	    	System.out.println("算机2103 欧阳文帅2112180310");
	        wc1 q = new wc1(5);
	        q.deQueue();//
	        q.enQueue(1);
	        q.enQueue(32);
	        q.enQueue(8);
	        q.enQueue(1);
	        q.enQueue(32);
	        q.enQueue(8);
	        q.queueTraverse();
	    }}
	    
